version: '3.8'

# Mini Commerce MSA - Production Docker Compose
# =============================================
# This is the production-ready Docker Compose configuration

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: mini-commerce-postgres
    environment:
      POSTGRES_DB: mini_commerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - mini-commerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: mini-commerce-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - mini-commerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auth Service
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: mini-commerce-auth
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/mini_commerce
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-here}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
    ports:
      - "3001:3001"
    networks:
      - mini-commerce-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Catalog Service
  catalog-service:
    build:
      context: ./services/catalog
      dockerfile: Dockerfile
    container_name: mini-commerce-catalog
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/mini_commerce
      - PORT=3002
    ports:
      - "3002:3002"
    networks:
      - mini-commerce-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cart Service
  cart-service:
    build:
      context: ./services/cart
      dockerfile: Dockerfile
    container_name: mini-commerce-cart
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/mini_commerce
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      - PORT=3003
    ports:
      - "3003:3003"
    networks:
      - mini-commerce-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./services/order
      dockerfile: Dockerfile
    container_name: mini-commerce-order
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/mini_commerce
      - PORT=3004
    ports:
      - "3004:3004"
    networks:
      - mini-commerce-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Inventory Service
  inventory-service:
    build:
      context: ./services/inventory
      dockerfile: Dockerfile
    container_name: mini-commerce-inventory
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/mini_commerce
      - PORT=3005
    ports:
      - "3005:3005"
    networks:
      - mini-commerce-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-mock
      dockerfile: Dockerfile
    container_name: mini-commerce-payment
    environment:
      - PORT=3006
    ports:
      - "3006:3006"
    networks:
      - mini-commerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: mini-commerce-notification
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/mini_commerce
      - PORT=3007
    ports:
      - "3007:3007"
    networks:
      - mini-commerce-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway
  gateway-service:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    container_name: mini-commerce-gateway
    environment:
      - NODE_ENV=production
      - PORT=8080
      - AUTH_SERVICE_URL=http://auth-service:3001
      - CATALOG_SERVICE_URL=http://catalog-service:3002
      - CART_SERVICE_URL=http://cart-service:3003
      - ORDER_SERVICE_URL=http://order-service:3004
      - INVENTORY_SERVICE_URL=http://inventory-service:3005
      - PAYMENT_SERVICE_URL=http://payment-service:3006
      - NOTIFICATION_SERVICE_URL=http://notification-service:3007
    ports:
      - "8080:8080"
    networks:
      - mini-commerce-network
    depends_on:
      - auth-service
      - catalog-service
      - cart-service
      - order-service
      - inventory-service
      - payment-service
      - notification-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mini-commerce-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    ports:
      - "3000:80"
    networks:
      - mini-commerce-network
    depends_on:
      - gateway-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: mini-commerce-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - mini-commerce-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: mini-commerce-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - mini-commerce-network
    depends_on:
      - prometheus
    restart: unless-stopped

  loki:
    image: grafana/loki:latest
    container_name: mini-commerce-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - mini-commerce-network
    restart: unless-stopped

  tempo:
    image: grafana/tempo:latest
    container_name: mini-commerce-tempo
    command: -config.file=/etc/tempo.yaml
    volumes:
      - ./monitoring/tempo-config.yml:/etc/tempo.yaml
      - tempo_data:/tmp/tempo
    ports:
      - "3200:3200"
    networks:
      - mini-commerce-network
    restart: unless-stopped

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: mini-commerce-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mini-commerce-network
    depends_on:
      - frontend
      - gateway-service
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  tempo_data:
    driver: local

networks:
  mini-commerce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
