version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mini-commerce-db
    environment:
      POSTGRES_DB: mini_commerce
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/seed-data.sql:/docker-entrypoint-initdb.d/02-seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Auth Service
  auth-service:
    build: ./services/auth
    container_name: auth-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mini_commerce
      - DB_USER=postgres
      - DB_PASSWORD=password
      - JWT_SECRET=your-secret-key-change-in-production
      - PORT=8080
    ports:
      - "8081:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # Catalog Service
  catalog-service:
    build: ./services/catalog
    container_name: catalog-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mini_commerce
      - DB_USER=postgres
      - DB_PASSWORD=password
      - PORT=8080
    ports:
      - "8082:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # Cart Service
  cart-service:
    build: ./services/cart
    container_name: cart-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mini_commerce
      - DB_USER=postgres
      - DB_PASSWORD=password
      - PORT=8080
    ports:
      - "8083:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # Order Service
  order-service:
    build: ./services/order
    container_name: order-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mini_commerce
      - DB_USER=postgres
      - DB_PASSWORD=password
      - PORT=8080
    ports:
      - "8084:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # Inventory Service
  inventory-service:
    build: ./services/inventory
    container_name: inventory-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mini_commerce
      - DB_USER=postgres
      - DB_PASSWORD=password
      - PORT=8080
    ports:
      - "8085:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # Payment Service
  payment-service:
    build: ./services/payment-mock
    container_name: payment-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mini_commerce
      - DB_USER=postgres
      - DB_PASSWORD=password
      - PORT=8080
    ports:
      - "8086:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # Notification Service
  notification-service:
    build: ./services/notification
    container_name: notification-service
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=mini_commerce
      - DB_USER=postgres
      - DB_PASSWORD=password
      - PORT=8080
    ports:
      - "8087:8080"
    depends_on:
      postgres:
        condition: service_healthy

  # API Gateway
  api-gateway:
    build: ./services/gateway
    container_name: api-gateway
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8080
      - CATALOG_SERVICE_URL=http://catalog-service:8080
      - CART_SERVICE_URL=http://cart-service:8080
      - ORDER_SERVICE_URL=http://order-service:8080
      - INVENTORY_SERVICE_URL=http://inventory-service:8080
      - PAYMENT_SERVICE_URL=http://payment-service:8080
      - NOTIFICATION_SERVICE_URL=http://notification-service:8080
      - PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - catalog-service
      - cart-service
      - order-service
      - inventory-service
      - payment-service
      - notification-service

  # Frontend
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway

volumes:
  postgres_data:
