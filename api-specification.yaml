openapi: 3.0.3
info:
  title: Mini Commerce MSA API
  description: |
    한국형 이커머스 플랫폼을 위한 마이크로서비스 아키텍처 API 명세서
    
    ## 아키텍처 개요
    - **Frontend**: React + TypeScript + Tailwind CSS
    - **API Gateway**: Node.js + Express (포트 8080)
    - **마이크로서비스**: Node.js, Python/FastAPI, Go, Java/Spring Boot
    - **데이터베이스**: PostgreSQL + Redis
    - **인프라**: Kubernetes + Istio Service Mesh
    
    ## 인증
    - JWT (JSON Web Token) 기반 인증
    - Authorization: Bearer {token}
    
    ## 서비스 포트
    - Auth Service: 3001
    - Catalog Service: 3002 (내부 8080)
    - Cart Service: 3003
    - Order Service: 3004 (내부 8080)
    - Inventory Service: 3005
    - Payment Service: 3006
    - Notification Service: 3007
    - Gateway: 8080
    
  version: 1.0.0
  contact:
    name: Mini Commerce Team
    email: dev@minicommerce.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.minicommerce.com
    description: Production server
  - url: https://staging-api.minicommerce.com
    description: Staging server
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: Authentication
    description: 사용자 인증 및 권한 관리
  - name: Catalog
    description: 상품 정보 및 검색
  - name: Cart
    description: 장바구니 관리
  - name: Order
    description: 주문 처리 및 관리
  - name: Inventory
    description: 재고 관리
  - name: Payment
    description: 결제 처리
  - name: Notification
    description: 알림 서비스
  - name: Health
    description: 서비스 상태 확인

paths:
  # ==================== Authentication Service ====================
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: 사용자 회원가입
      description: 새로운 사용자 계정을 생성합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "password123"
                name:
                  type: string
                  example: "홍길동"
                phone:
                  type: string
                  example: "010-1234-5678"
      responses:
        '201':
          description: 회원가입 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: 사용자 로그인
      description: 이메일과 비밀번호로 로그인합니다.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        '200':
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
                    description: JWT 토큰
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: 현재 사용자 정보 조회
      description: JWT 토큰을 통해 현재 로그인한 사용자 정보를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 사용자 정보 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: 사용자 로그아웃
      description: 현재 세션을 종료합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 로그아웃 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  # ==================== Catalog Service ====================
  /api/catalog/products:
    get:
      tags:
        - Catalog
      summary: 상품 목록 조회
      description: 상품 목록을 페이지네이션과 함께 조회합니다.
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          description: 카테고리 필터
          schema:
            type: string
        - name: search
          in: query
          description: 검색 키워드
          schema:
            type: string
        - name: sort
          in: query
          description: 정렬 기준
          schema:
            type: string
            enum: [price_asc, price_desc, name_asc, name_desc, created_at_desc]
            default: created_at_desc
        - name: min_price
          in: query
          description: 최소 가격
          schema:
            type: number
        - name: max_price
          in: query
          description: 최대 가격
          schema:
            type: number
      responses:
        '200':
          description: 상품 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

  /api/catalog/products/{productId}:
    get:
      tags:
        - Catalog
      summary: 상품 상세 조회
      description: 특정 상품의 상세 정보를 조회합니다.
      parameters:
        - name: productId
          in: path
          required: true
          description: 상품 ID
          schema:
            type: integer
      responses:
        '200':
          description: 상품 상세 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/ProductDetail'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/catalog/categories:
    get:
      tags:
        - Catalog
      summary: 카테고리 목록 조회
      description: 상품 카테고리 목록을 조회합니다.
      responses:
        '200':
          description: 카테고리 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'

  # ==================== Cart Service ====================
  /api/cart:
    get:
      tags:
        - Cart
      summary: 장바구니 조회
      description: 현재 사용자의 장바구니를 조회합니다.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 장바구니 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Cart'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Cart
      summary: 장바구니에 상품 추가
      description: 장바구니에 상품을 추가합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product_id
                - quantity
              properties:
                product_id:
                  type: integer
                  example: 1
                quantity:
                  type: integer
                  minimum: 1
                  example: 2
                options:
                  type: object
                  description: 상품 옵션 (색상, 사이즈 등)
      responses:
        '201':
          description: 장바구니 추가 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/CartItem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/cart/items/{itemId}:
    put:
      tags:
        - Cart
      summary: 장바구니 항목 수량 수정
      description: 장바구니 항목의 수량을 수정합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: 장바구니 항목 ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  example: 3
      responses:
        '200':
          description: 수량 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Cart
      summary: 장바구니 항목 삭제
      description: 장바구니에서 특정 항목을 삭제합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: itemId
          in: path
          required: true
          description: 장바구니 항목 ID
          schema:
            type: integer
      responses:
        '200':
          description: 항목 삭제 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ==================== Order Service ====================
  /api/orders:
    get:
      tags:
        - Order
      summary: 주문 목록 조회
      description: 사용자의 주문 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: 주문 상태 필터
          schema:
            type: string
            enum: [pending, confirmed, shipping, delivered, cancelled]
      responses:
        '200':
          description: 주문 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Order
      summary: 주문 생성
      description: 장바구니의 상품들로 주문을 생성합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
                - shipping_address
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - product_id
                      - quantity
                    properties:
                      product_id:
                        type: integer
                      quantity:
                        type: integer
                      options:
                        type: object
                shipping_address:
                  $ref: '#/components/schemas/Address'
                payment_method:
                  type: string
                  enum: [card, bank_transfer, virtual_account]
                coupon_code:
                  type: string
                memo:
                  type: string
      responses:
        '201':
          description: 주문 생성 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/orders/{orderId}:
    get:
      tags:
        - Order
      summary: 주문 상세 조회
      description: 특정 주문의 상세 정보를 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: 주문 ID
          schema:
            type: integer
      responses:
        '200':
          description: 주문 상세 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/OrderDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Order
      summary: 주문 상태 수정
      description: 주문 상태를 수정합니다. (관리자만 가능)
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: 주문 ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, confirmed, shipping, delivered, cancelled]
                tracking_number:
                  type: string
                memo:
                  type: string
      responses:
        '200':
          description: 주문 상태 수정 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ==================== Inventory Service ====================
  /api/inventory/{productId}/status:
    get:
      tags:
        - Inventory
      summary: 상품 재고 상태 조회
      description: 특정 상품의 재고 상태를 조회합니다.
      parameters:
        - name: productId
          in: path
          required: true
          description: 상품 ID
          schema:
            type: integer
      responses:
        '200':
          description: 재고 상태 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/InventoryStatus'
        '404':
          $ref: '#/components/responses/NotFound'

  /api/inventory/reserve:
    post:
      tags:
        - Inventory
      summary: 재고 예약
      description: 주문을 위한 재고를 예약합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - items
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required:
                      - product_id
                      - quantity
                    properties:
                      product_id:
                        type: integer
                      quantity:
                        type: integer
      responses:
        '200':
          description: 재고 예약 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InventoryReservation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ==================== Payment Service ====================
  /api/payment/methods:
    get:
      tags:
        - Payment
      summary: 결제 수단 목록 조회
      description: 사용 가능한 결제 수단 목록을 조회합니다.
      responses:
        '200':
          description: 결제 수단 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PaymentMethod'

  /api/payment/process:
    post:
      tags:
        - Payment
      summary: 결제 처리
      description: 주문에 대한 결제를 처리합니다.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order_id
                - payment_method
                - amount
              properties:
                order_id:
                  type: integer
                payment_method:
                  type: string
                  enum: [card, bank_transfer, virtual_account, kakao_pay, naver_pay]
                amount:
                  type: number
                card_info:
                  type: object
                  properties:
                    card_number:
                      type: string
                    expiry_date:
                      type: string
                    cvv:
                      type: string
      responses:
        '200':
          description: 결제 처리 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/PaymentResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # ==================== Notification Service ====================
  /api/notifications:
    get:
      tags:
        - Notification
      summary: 알림 목록 조회
      description: 사용자의 알림 목록을 조회합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: type
          in: query
          description: 알림 타입 필터
          schema:
            type: string
            enum: [order, payment, promotion, system]
      responses:
        '200':
          description: 알림 목록 조회 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/notifications/{notificationId}/read:
    put:
      tags:
        - Notification
      summary: 알림 읽음 처리
      description: 특정 알림을 읽음 처리합니다.
      security:
        - bearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          description: 알림 ID
          schema:
            type: integer
      responses:
        '200':
          description: 알림 읽음 처리 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  # ==================== Health Check ====================
  /health:
    get:
      tags:
        - Health
      summary: 서비스 상태 확인
      description: API Gateway의 상태를 확인합니다.
      responses:
        '200':
          description: 서비스 정상
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  services:
                    type: object
                    properties:
                      auth:
                        type: string
                        example: "healthy"
                      catalog:
                        type: string
                        example: "healthy"
                      cart:
                        type: string
                        example: "healthy"
                      order:
                        type: string
                        example: "healthy"
                      inventory:
                        type: string
                        example: "healthy"
                      payment:
                        type: string
                        example: "healthy"
                      notification:
                        type: string
                        example: "healthy"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "홍길동"
        phone:
          type: string
          example: "010-1234-5678"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "스마트폰 케이스"
        description:
          type: string
          example: "고품질 실리콘 케이스"
        price:
          type: number
          format: decimal
          example: 15000.00
        original_price:
          type: number
          format: decimal
          example: 20000.00
        discount_rate:
          type: number
          format: decimal
          example: 25.0
        category_id:
          type: integer
          example: 1
        category_name:
          type: string
          example: "전자제품"
        stock_quantity:
          type: integer
          example: 100
        images:
          type: array
          items:
            type: string
          example: ["https://example.com/image1.jpg", "https://example.com/image2.jpg"]
        tags:
          type: array
          items:
            type: string
          example: ["케이스", "스마트폰", "보호"]
        is_featured:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductDetail:
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            specifications:
              type: object
              example:
                material: "실리콘"
                color: "투명"
                size: "6.1인치"
            reviews:
              type: array
              items:
                $ref: '#/components/schemas/Review'
            related_products:
              type: array
              items:
                $ref: '#/components/schemas/Product'

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "전자제품"
        description:
          type: string
          example: "스마트폰, 태블릿, 액세서리"
        parent_id:
          type: integer
          nullable: true
          example: null
        sort_order:
          type: integer
          example: 1
        is_active:
          type: boolean
          example: true

    Cart:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total_items:
          type: integer
          example: 3
        total_price:
          type: number
          format: decimal
          example: 45000.00
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CartItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        cart_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          example: 2
        options:
          type: object
          example:
            color: "빨강"
            size: "L"
        price:
          type: number
          format: decimal
          example: 15000.00
        total_price:
          type: number
          format: decimal
          example: 30000.00

    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        order_number:
          type: string
          example: "ORD-20231201-001"
        status:
          type: string
          enum: [pending, confirmed, shipping, delivered, cancelled]
          example: "pending"
        total_amount:
          type: number
          format: decimal
          example: 45000.00
        shipping_address:
          $ref: '#/components/schemas/Address'
        payment_method:
          type: string
          example: "card"
        payment_status:
          type: string
          enum: [pending, paid, failed, refunded]
          example: "pending"
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderDetail:
      allOf:
        - $ref: '#/components/schemas/Order'
        - type: object
          properties:
            tracking_number:
              type: string
              example: "1234567890"
            shipping_info:
              type: object
              properties:
                carrier:
                  type: string
                  example: "CJ대한통운"
                estimated_delivery:
                  type: string
                  format: date-time
            payment_info:
              type: object
              properties:
                transaction_id:
                  type: string
                  example: "TXN-123456789"
                paid_at:
                  type: string
                  format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          example: 1
        order_id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: decimal
          example: 15000.00
        total_price:
          type: number
          format: decimal
          example: 30000.00

    Address:
      type: object
      properties:
        name:
          type: string
          example: "홍길동"
        phone:
          type: string
          example: "010-1234-5678"
        address_line1:
          type: string
          example: "서울시 강남구 테헤란로 123"
        address_line2:
          type: string
          example: "456호"
        city:
          type: string
          example: "서울시"
        state:
          type: string
          example: "강남구"
        postal_code:
          type: string
          example: "06292"
        country:
          type: string
          example: "대한민국"

    InventoryStatus:
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        available_quantity:
          type: integer
          example: 50
        reserved_quantity:
          type: integer
          example: 10
        total_quantity:
          type: integer
          example: 60
        is_in_stock:
          type: boolean
          example: true
        last_updated:
          type: string
          format: date-time

    InventoryReservation:
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 2
        reservation_id:
          type: string
          example: "RES-123456789"
        expires_at:
          type: string
          format: date-time

    PaymentMethod:
      type: object
      properties:
        id:
          type: string
          example: "card"
        name:
          type: string
          example: "신용카드"
        description:
          type: string
          example: "VISA, MasterCard, 국내카드"
        is_available:
          type: boolean
          example: true
        icon:
          type: string
          example: "https://example.com/card-icon.png"

    PaymentResult:
      type: object
      properties:
        payment_id:
          type: string
          example: "PAY-123456789"
        order_id:
          type: integer
          example: 1
        amount:
          type: number
          format: decimal
          example: 45000.00
        status:
          type: string
          enum: [success, failed, pending]
          example: "success"
        transaction_id:
          type: string
          example: "TXN-123456789"
        payment_method:
          type: string
          example: "card"
        paid_at:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        type:
          type: string
          enum: [order, payment, promotion, system]
          example: "order"
        title:
          type: string
          example: "주문이 확인되었습니다"
        message:
          type: string
          example: "주문번호 ORD-20231201-001이 확인되었습니다."
        is_read:
          type: boolean
          example: false
        data:
          type: object
          example:
            order_id: 1
            order_number: "ORD-20231201-001"
        created_at:
          type: string
          format: date-time

    Review:
      type: object
      properties:
        id:
          type: integer
          example: 1
        product_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        user_name:
          type: string
          example: "홍길동"
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        title:
          type: string
          example: "정말 좋은 제품입니다"
        content:
          type: string
          example: "품질이 우수하고 가격도 합리적입니다."
        images:
          type: array
          items:
            type: string
          example: ["https://example.com/review1.jpg"]
        is_verified:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        total_pages:
          type: integer
          example: 5
        has_next:
          type: boolean
          example: true
        has_prev:
          type: boolean
          example: false

  responses:
    BadRequest:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "잘못된 요청입니다."
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string

    Unauthorized:
      description: 인증 실패
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "인증이 필요합니다."

    Forbidden:
      description: 권한 없음
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "접근 권한이 없습니다."

    NotFound:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "요청한 리소스를 찾을 수 없습니다."

    Conflict:
      description: 충돌
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "이미 존재하는 리소스입니다."

    InternalServerError:
      description: 서버 내부 오류
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: false
              message:
                type: string
                example: "서버 내부 오류가 발생했습니다."
              error_id:
                type: string
                example: "ERR-123456789"
